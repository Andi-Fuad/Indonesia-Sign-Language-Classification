{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# src/train.py\n\nimport torch\nimport torch.optim as optim\nimport torch.nn as nn\nimport time\n\ndef train_model(model, train_loader, test_loader, num_epochs=25, lr=1e-3, weight_decay=1e-4):\n    device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n    model = model.to(device)\n    \n    criterion = nn.CrossEntropyLoss()\n    optimizer = torch.optim.Adam(model.parameters(), lr=lr, weight_decay=weight_decay)\n    \n    train_losses = []\n    test_losses = []\n    train_accuracies = []\n    test_accuracies = []\n    \n    overall_start_time = time.time() \n    for epoch in range(num_epochs):\n        epoch_start_time = time.time() \n        \n        model.train()\n        running_loss = 0.0\n        correct_train = 0\n        total_train = 0\n    \n        for inputs, labels in train_loader:\n            inputs, labels = inputs.to(device), labels.to(device)\n    \n            optimizer.zero_grad()\n            outputs = model(inputs)\n            loss = criterion(outputs, labels)\n            loss.backward()\n            optimizer.step()\n    \n            running_loss += loss.item()\n            _, preds = torch.max(outputs, 1)\n            correct_train += (preds == labels).sum().item()\n            total_train += labels.size(0)\n    \n        train_losses.append(running_loss/len(train_loader))\n        train_accuracies.append(correct_train/total_train)\n    \n        # Evaluate on test set\n        model.eval()\n        running_loss = 0.0\n        correct_test = 0\n        total_test = 0\n    \n        with torch.no_grad():\n            for inputs, labels in test_loader:\n                inputs, labels = inputs.to(device), labels.to(device)\n                outputs = model(inputs)\n                loss = criterion(outputs, labels)\n    \n                running_loss += loss.item()\n                _, preds = torch.max(outputs, 1)\n                correct_test += (preds == labels).sum().item()\n                total_test += labels.size(0)\n    \n        test_losses.append(running_loss/len(test_loader))\n        test_accuracies.append(correct_test/total_test)\n\n        print(f'Epoch [{epoch + 1}/{num_epochs}] - Train Loss: {train_losses[-1]:.4f}, Train Accuracy: {train_accuracies[-1]:.4f}, Test Loss: {test_losses[-1]:.4f}, Test Accuracy: {test_accuracies[-1]:.4f}')\n    \n    overall_end_time = time.time()\n    total_training_time = overall_end_time - overall_start_time \n    print(f'Total training time: {total_training_time:.2f} seconds')\n\n    return train_losses, test_losses, train_accuracies, test_accuracies","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[{"name":"stdout","text":"All Clear\n","output_type":"stream"}],"execution_count":2}]}
