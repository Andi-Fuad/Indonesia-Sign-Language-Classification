{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# src/evaluate.py\n\nimport torch\nfrom sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay, precision_score, recall_score, f1_score\nimport matplotlib.pyplot as plt\n\ndef conf_matrix(model, test_loader, classes):\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    model.to(device)\n    \n    model.eval()\n    \n    y_true = []\n    y_pred = []\n    \n    with torch.no_grad():\n        for inputs, labels in test_loader:\n            inputs, labels = inputs.to(device), labels.to(device)\n            outputs = model(inputs)\n            _, preds = torch.max(outputs, 1)\n            y_true.extend(labels.cpu().tolist())\n            y_pred.extend(preds.cpu().tolist())\n    \n    # Confusion Matrix\n    cm = confusion_matrix(y_true, y_pred)\n    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=classes)\n    disp.plot(cmap=plt.cm.Blues)\n    plt.show()\n\ndef eval_plot(model, train_losses, test_losses, train_accuracies, test_accuracies, num_epochs=25):\n    # Plot loss\n    plt.figure(figsize=(12, 5))\n    plt.subplot(1, 2, 1)\n    plt.plot(range(1, num_epochs+1), train_losses, label='Train Loss')\n    plt.plot(range(1, num_epochs+1), test_losses, label='Test Loss')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss')\n    plt.title('Train and Test Loss over Epochs')\n    plt.legend()\n    \n    # Plot accuracy\n    plt.subplot(1, 2, 2)\n    plt.plot(range(1, num_epochs+1), train_accuracies, label='Train Accuracy')\n    plt.plot(range(1, num_epochs+1), test_accuracies, label='Test Accuracy')\n    plt.xlabel('Epochs')\n    plt.ylabel('Accuracy')\n    plt.title('Train and Test Accuracy over Epochs')\n    plt.legend()\n    \n    plt.show()\n\n\ndef calculate_metrics_per_label(model, test_loader):\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    model.to(device)\n    \n    model.eval()  \n\n    all_preds = []\n    all_labels = []\n    \n    with torch.no_grad():\n        for images, labels in test_loader:\n            images, labels = images.to(device), labels.to(device)\n            outputs = model(images)  \n            _, preds = torch.max(outputs, 1)  \n            \n            all_preds.extend(preds.cpu().tolist())\n            all_labels.extend(labels.cpu().tolist())\n    \n    # Menghitung Precision, Recall, F1-score untuk setiap label\n    precision = precision_score(all_labels, all_preds, average=None)\n    recall = recall_score(all_labels, all_preds, average=None)\n    f1 = f1_score(all_labels, all_preds, average=None)\n    \n    return precision, recall, f1","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-06T14:43:05.169525Z","iopub.execute_input":"2025-03-06T14:43:05.169806Z","iopub.status.idle":"2025-03-06T14:43:05.179200Z","shell.execute_reply.started":"2025-03-06T14:43:05.169785Z","shell.execute_reply":"2025-03-06T14:43:05.178406Z"}},"outputs":[{"name":"stdout","text":"All Clear\n","output_type":"stream"}],"execution_count":9}]}