{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\n# %% [code]\n# %% [code]\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-06T09:50:07.838483Z\",\"iopub.execute_input\":\"2025-03-06T09:50:07.838749Z\",\"iopub.status.idle\":\"2025-03-06T09:50:13.909733Z\",\"shell.execute_reply.started\":\"2025-03-06T09:50:07.838725Z\",\"shell.execute_reply\":\"2025-03-06T09:50:13.908787Z\"}}\n# src/models.py\n\nimport torch.nn as nn\nfrom torchvision import models\nfrom torchinfo import summary\n\ndef get_model(model_name, num_classes=26):\n    if model_name == 'efficientnetv2':\n        model = models.efficientnet_v2_s(weights='DEFAULT')\n        freeze_param(model)\n        model.classifier = nn.Sequential(\n            nn.Dropout(p=0.3),\n            nn.Linear(model.classifier[1].in_features, num_classes)  \n        )\n    elif model_name == 'resnet':\n        model = models.resnet50(weights='DEFAULT')\n        freeze_param(model)\n        model.fc = nn.Sequential(\n            nn.Dropout(p=0.3), \n            nn.Linear(model.fc.in_features, num_classes)\n        )\n    elif model_name == 'vit':\n        model = models.vit_b_32(weights='DEFAULT')\n        freeze_param(model)\n        model.heads = nn.Sequential(\n            nn.Dropout(p=0.3), \n            nn.Linear(in_features = 768, out_features=num_classes)\n        )\n    else:\n        raise ValueError(f\"Unknown model: {model_name}\")\n    \n    return model\n\ndef freeze_param(model):\n    for param in model.parameters():\n        param.requires_grad = False\n\ndef model_summary(model, BATCH_SIZE=32):\n    architecture = summary(model=model,\n       input_size=(BATCH_SIZE, 3, 224, 224),\n       col_names=[\"input_size\", \"output_size\", \"num_params\", \"trainable\"],\n       col_width=20,\n    )\n    return architecture","metadata":{"_uuid":"cae2a306-2d3d-4a2c-b6bb-b8ae5fa05dcc","_cell_guid":"71bfefeb-618a-4a63-a2d7-e46f042b8844","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}